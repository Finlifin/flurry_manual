// Populate the sidebar
//
// This is a script, and not included directly in the page, to control the total size of the book.
// The TOC contains an entry for each page, so if each page includes a copy of the TOC,
// the total size of the page becomes O(n**2).
class MDBookSidebarScrollbox extends HTMLElement {
    constructor() {
        super();
    }
    connectedCallback() {
        this.innerHTML = '<ol class="chapter"><li class="chapter-item expanded affix "><li class="part-title">引论与愿景</li><li class="chapter-item expanded "><a href="introduction/vision.html"><strong aria-hidden="true">1.</strong> Flurry: 一个编程语言</a></li><li class="chapter-item expanded "><a href="introduction/quickstart.html"><strong aria-hidden="true">2.</strong> 快速入门</a></li><li class="chapter-item expanded affix "><li class="part-title">核心语言特性</li><li class="chapter-item expanded "><a href="core/basics.html"><strong aria-hidden="true">3.</strong> 基础语法与数据类型</a></li><li><ol class="section"><li class="chapter-item expanded "><a href="core/basics/lexical.html"><strong aria-hidden="true">3.1.</strong> 词法结构</a></li><li class="chapter-item expanded "><a href="core/basics/literals.html"><strong aria-hidden="true">3.2.</strong> 字面量详解</a></li><li class="chapter-item expanded "><a href="core/basics/primitives.html"><strong aria-hidden="true">3.3.</strong> 基本数据类型</a></li><li class="chapter-item expanded "><a href="core/basics/symbols.html"><strong aria-hidden="true">3.4.</strong> 符号</a></li></ol></li><li class="chapter-item expanded "><a href="core/ownership.html"><strong aria-hidden="true">4.</strong> 变量、所有权与资源管理</a></li><li><ol class="section"><li class="chapter-item expanded "><a href="core/ownership/bindings.html"><strong aria-hidden="true">4.1.</strong> 声明与绑定</a></li><li class="chapter-item expanded "><a href="core/ownership/affine_move.html"><strong aria-hidden="true">4.2.</strong> 仿射类型与移动语义</a></li><li class="chapter-item expanded "><a href="core/ownership/references.html"><strong aria-hidden="true">4.3.</strong> 引用与借用</a></li><li class="chapter-item expanded "><a href="core/ownership/drop.html"><strong aria-hidden="true">4.4.</strong> 资源管理与 Drop</a></li><li class="chapter-item expanded "><a href="core/ownership/reachability_effects.html"><strong aria-hidden="true">4.5.</strong> 引用有效性：可达性与副作用</a></li></ol></li><li class="chapter-item expanded "><a href="core/expressions.html"><strong aria-hidden="true">5.</strong> 表达式与运算符</a></li><li><ol class="section"><li class="chapter-item expanded "><a href="core/expressions/operators.html"><strong aria-hidden="true">5.1.</strong> 常用运算符</a></li><li class="chapter-item expanded "><a href="core/expressions/suffix_chaining.html"><strong aria-hidden="true">5.2.</strong> 后缀风格与链式调用</a></li><li class="chapter-item expanded "><a href="core/expressions/image_op.html"><strong aria-hidden="true">5.3.</strong> 取像操作 (expr &#39; image)</a></li></ol></li><li class="chapter-item expanded "><a href="core/control_flow.html"><strong aria-hidden="true">6.</strong> 基本控制流</a></li><li><ol class="section"><li class="chapter-item expanded "><a href="core/control_flow/conditional.html"><strong aria-hidden="true">6.1.</strong> 条件语句 (if, when)</a></li><li class="chapter-item expanded "><a href="core/control_flow/loops.html"><strong aria-hidden="true">6.2.</strong> 循环语句 (for, while)</a></li><li class="chapter-item expanded "><a href="core/control_flow/transfer.html"><strong aria-hidden="true">6.3.</strong> 控制转移 (break, continue, return)</a></li></ol></li><li class="chapter-item expanded "><a href="core/functions.html"><strong aria-hidden="true">7.</strong> 函数</a></li><li><ol class="section"><li class="chapter-item expanded "><a href="core/functions/definition.html"><strong aria-hidden="true">7.1.</strong> 定义与调用</a></li><li class="chapter-item expanded "><a href="core/functions/parameters.html"><strong aria-hidden="true">7.2.</strong> 参数详解</a></li><li class="chapter-item expanded "><a href="core/functions/return_errors.html"><strong aria-hidden="true">7.3.</strong> 返回值与错误处理 (!)</a></li></ol></li><li class="chapter-item expanded "><a href="core/data_structures.html"><strong aria-hidden="true">8.</strong> 数据结构</a></li><li><ol class="section"><li class="chapter-item expanded "><a href="core/data_structures/structs.html"><strong aria-hidden="true">8.1.</strong> 结构体 (Structs)</a></li><li class="chapter-item expanded "><a href="core/data_structures/enums.html"><strong aria-hidden="true">8.2.</strong> 枚举 (Enums)</a></li><li><ol class="section"><li class="chapter-item expanded "><a href="core/data_structures/enums/hierarchy_fusion.html"><strong aria-hidden="true">8.2.1.</strong> 层级化与融合</a></li><li class="chapter-item expanded "><a href="core/data_structures/enums/attributes.html"><strong aria-hidden="true">8.2.2.</strong> 枚举属性</a></li><li class="chapter-item expanded "><a href="core/data_structures/enums/tagged_polymorphism.html"><strong aria-hidden="true">8.2.3.</strong> Tagged Polymorphism</a></li></ol></li><li class="chapter-item expanded "><a href="core/data_structures/unions.html"><strong aria-hidden="true">8.3.</strong> 联合体 (Unions)</a></li><li class="chapter-item expanded "><a href="core/data_structures/arrays_slices.html"><strong aria-hidden="true">8.4.</strong> 数组与切片 (Arrays &amp; Slices)</a></li><li class="chapter-item expanded "><a href="core/data_structures/tuples.html"><strong aria-hidden="true">8.5.</strong> 元组 (Tuples)</a></li><li class="chapter-item expanded "><a href="core/data_structures/modules_as_types.html"><strong aria-hidden="true">8.6.</strong> 模块 (Modules as Types)</a></li><li class="chapter-item expanded "><a href="core/data_structures/newtypes.html"><strong aria-hidden="true">8.7.</strong> Newtypes</a></li></ol></li><li class="chapter-item expanded "><a href="core/pattern_matching.html"><strong aria-hidden="true">9.</strong> 模式匹配</a></li><li><ol class="section"><li class="chapter-item expanded "><a href="core/pattern_matching/syntax.html"><strong aria-hidden="true">9.1.</strong> 模式语法</a></li><li class="chapter-item expanded "><a href="core/pattern_matching/control_flow.html"><strong aria-hidden="true">9.2.</strong> 匹配控制流 (match, if is, while is)</a></li></ol></li><li class="chapter-item expanded "><a href="core/traits_polymorphism.html"><strong aria-hidden="true">10.</strong> Trait 与多态</a></li><li><ol class="section"><li class="chapter-item expanded "><a href="core/traits_polymorphism/traits.html"><strong aria-hidden="true">10.1.</strong> Trait 定义与实现 (impl, derive)</a></li><li class="chapter-item expanded "><a href="core/traits_polymorphism/extend.html"><strong aria-hidden="true">10.2.</strong> 扩展 (extend) 与字面量拓展</a></li><li class="chapter-item expanded "><a href="core/traits_polymorphism/dynamic.html"><strong aria-hidden="true">10.3.</strong> 动态多态 (dyn Trait vs tagged_polymorphic)</a></li><li class="chapter-item expanded "><a href="core/traits_polymorphism/using.html"><strong aria-hidden="true">10.4.</strong> 组合与委托 (using)</a></li></ol></li><li class="chapter-item expanded "><li class="part-title">高级特性与元编程</li><li class="chapter-item expanded "><a href="advanced/comptime.html"><strong aria-hidden="true">11.</strong> 编译时计算 (comptime)</a></li><li class="chapter-item expanded "><a href="advanced/type_predicates.html"><strong aria-hidden="true">12.</strong> 类型谓词 (type predicate)</a></li><li class="chapter-item expanded "><a href="advanced/effects.html"><strong aria-hidden="true">13.</strong> 代数效应 (Algebraic Effects)</a></li><li><ol class="section"><li class="chapter-item expanded "><a href="advanced/effects/definition.html"><strong aria-hidden="true">13.1.</strong> 概念与定义 (effect, yield)</a></li><li class="chapter-item expanded "><a href="advanced/effects/handling.html"><strong aria-hidden="true">13.2.</strong> 处理与恢复 (handles, resume)</a></li><li class="chapter-item expanded "><a href="advanced/effects/prefabricated.html"><strong aria-hidden="true">13.3.</strong> 预制 Handler</a></li><li class="chapter-item expanded "><a href="advanced/effects/use_cases.html"><strong aria-hidden="true">13.4.</strong> 应用场景</a></li></ol></li><li class="chapter-item expanded "><a href="advanced/error_handling.html"><strong aria-hidden="true">14.</strong> 错误处理机制 (!Errors T)</a></li><li><ol class="section"><li class="chapter-item expanded "><a href="advanced/error_handling/syntax.html"><strong aria-hidden="true">14.1.</strong> 语法与传播 (!)</a></li><li class="chapter-item expanded "><a href="advanced/error_handling/handling.html"><strong aria-hidden="true">14.2.</strong> 处理 (! { ... })</a></li><li class="chapter-item expanded "><a href="advanced/error_handling/fusion.html"><strong aria-hidden="true">14.3.</strong> 自动枚举融合</a></li></ol></li><li class="chapter-item expanded "><a href="advanced/modules_packages.html"><strong aria-hidden="true">15.</strong> 模块系统与包管理</a></li><li><ol class="section"><li class="chapter-item expanded "><a href="advanced/modules_packages/modules.html"><strong aria-hidden="true">15.1.</strong> 模块定义与组织 (mod, mod file)</a></li><li class="chapter-item expanded "><a href="advanced/modules_packages/use.html"><strong aria-hidden="true">15.2.</strong> 导入 (use)</a></li><li class="chapter-item expanded "><a href="advanced/modules_packages/packages.html"><strong aria-hidden="true">15.3.</strong> 包与 package.fl</a></li></ol></li><li class="chapter-item expanded "><a href="advanced/attributes.html"><strong aria-hidden="true">16.</strong> 属性系统 (Attributes)</a></li><li><ol class="section"><li class="chapter-item expanded "><a href="advanced/attributes/syntax.html"><strong aria-hidden="true">16.1.</strong> 语法 (^expr, .symbol)</a></li><li class="chapter-item expanded "><a href="advanced/attributes/comptime.html"><strong aria-hidden="true">16.2.</strong> 编译时配置与反射</a></li><li class="chapter-item expanded "><a href="advanced/attributes/library_use.html"><strong aria-hidden="true">16.3.</strong> 库扩展应用</a></li></ol></li><li class="chapter-item expanded "><a href="advanced/macros.html"><strong aria-hidden="true">17.</strong> 宏系统 (占位符)</a></li><li><ol class="section"><li class="chapter-item expanded "><a href="advanced/macros/orm_dsl_example.html"><strong aria-hidden="true">17.1.</strong> ORM DSL 示例</a></li></ol></li><li class="chapter-item expanded "><li class="part-title">形式化验证与安全</li><li class="chapter-item expanded "><a href="safety/philosophy.html"><strong aria-hidden="true">18.</strong> Flurry 的安全哲学</a></li><li class="chapter-item expanded "><a href="safety/safe_guarantees.html"><strong aria-hidden="true">19.</strong> safe Flurry 的保证</a></li><li><ol class="section"><li class="chapter-item expanded "><a href="safety/safe_guarantees/affine_reachability.html"><strong aria-hidden="true">19.1.</strong> 仿射类型与可达性系统回顾</a></li></ol></li><li class="chapter-item expanded "><a href="safety/unsafe.html"><strong aria-hidden="true">20.</strong> unsafe Flurry</a></li><li><ol class="section"><li class="chapter-item expanded "><a href="safety/unsafe/risks.html"><strong aria-hidden="true">20.1.</strong> 必要性与风险</a></li><li class="chapter-item expanded "><a href="safety/unsafe/verification.html"><strong aria-hidden="true">20.2.</strong> 验证 unsafe 代码</a></li></ol></li><li class="chapter-item expanded "><a href="safety/verified.html"><strong aria-hidden="true">21.</strong> verified Flurry: 形式化验证</a></li><li><ol class="section"><li class="chapter-item expanded "><a href="safety/verified/methods.html"><strong aria-hidden="true">21.1.</strong> 目标与方法 (ML, RL, OSL)</a></li><li class="chapter-item expanded "><a href="safety/verified/workflow.html"><strong aria-hidden="true">21.2.</strong> 规范与工作流程</a></li></ol></li><li class="chapter-item expanded "><li class="part-title">深入主题与未来</li><li class="chapter-item expanded "><a href="advanced_topics/concurrency.html"><strong aria-hidden="true">22.</strong> 并发与并行</a></li><li class="chapter-item expanded "><a href="advanced_topics/ffi.html"><strong aria-hidden="true">23.</strong> 与外部代码交互 (FFI)</a></li><li class="chapter-item expanded "><a href="advanced_topics/design.html"><strong aria-hidden="true">24.</strong> 语言设计原理与权衡</a></li><li class="chapter-item expanded "><a href="advanced_topics/roadmap_community.html"><strong aria-hidden="true">25.</strong> 未来展望与社区参与</a></li><li class="chapter-item expanded affix "><li class="part-title">附录</li><li class="chapter-item expanded "><a href="appendix/syntax_cheat_sheet.html"><strong aria-hidden="true">26.</strong> 语法速查表</a></li><li class="chapter-item expanded "><a href="appendix/keywords.html"><strong aria-hidden="true">27.</strong> 关键字参考</a></li><li class="chapter-item expanded "><a href="appendix/attributes_reference.html"><strong aria-hidden="true">28.</strong> 内置属性参考</a></li><li class="chapter-item expanded "><a href="appendix/images_reference.html"><strong aria-hidden="true">29.</strong> 内置 &quot;像&quot; 参考</a></li><li class="chapter-item expanded "><a href="appendix/glossary.html"><strong aria-hidden="true">30.</strong> 词汇表</a></li></ol>';
        // Set the current, active page, and reveal it if it's hidden
        let current_page = document.location.href.toString().split("#")[0];
        if (current_page.endsWith("/")) {
            current_page += "index.html";
        }
        var links = Array.prototype.slice.call(this.querySelectorAll("a"));
        var l = links.length;
        for (var i = 0; i < l; ++i) {
            var link = links[i];
            var href = link.getAttribute("href");
            if (href && !href.startsWith("#") && !/^(?:[a-z+]+:)?\/\//.test(href)) {
                link.href = path_to_root + href;
            }
            // The "index" page is supposed to alias the first chapter in the book.
            if (link.href === current_page || (i === 0 && path_to_root === "" && current_page.endsWith("/index.html"))) {
                link.classList.add("active");
                var parent = link.parentElement;
                if (parent && parent.classList.contains("chapter-item")) {
                    parent.classList.add("expanded");
                }
                while (parent) {
                    if (parent.tagName === "LI" && parent.previousElementSibling) {
                        if (parent.previousElementSibling.classList.contains("chapter-item")) {
                            parent.previousElementSibling.classList.add("expanded");
                        }
                    }
                    parent = parent.parentElement;
                }
            }
        }
        // Track and set sidebar scroll position
        this.addEventListener('click', function(e) {
            if (e.target.tagName === 'A') {
                sessionStorage.setItem('sidebar-scroll', this.scrollTop);
            }
        }, { passive: true });
        var sidebarScrollTop = sessionStorage.getItem('sidebar-scroll');
        sessionStorage.removeItem('sidebar-scroll');
        if (sidebarScrollTop) {
            // preserve sidebar scroll position when navigating via links within sidebar
            this.scrollTop = sidebarScrollTop;
        } else {
            // scroll sidebar to current active section when navigating via "next/previous chapter" buttons
            var activeSection = document.querySelector('#sidebar .active');
            if (activeSection) {
                activeSection.scrollIntoView({ block: 'center' });
            }
        }
        // Toggle buttons
        var sidebarAnchorToggles = document.querySelectorAll('#sidebar a.toggle');
        function toggleSection(ev) {
            ev.currentTarget.parentElement.classList.toggle('expanded');
        }
        Array.from(sidebarAnchorToggles).forEach(function (el) {
            el.addEventListener('click', toggleSection);
        });
    }
}
window.customElements.define("mdbook-sidebar-scrollbox", MDBookSidebarScrollbox);
